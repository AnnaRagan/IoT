// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lights.proto

#include "lights.pb.h"
#include "lights.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Lights_method_names[] = {
  "/Lights/Connect",
};

std::unique_ptr< Lights::Stub> Lights::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Lights::Stub> stub(new Lights::Stub(channel));
  return stub;
}

Lights::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(Lights_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::Action, ::Detection>* Lights::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Action, ::Detection>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void Lights::Stub::experimental_async::Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Action,::Detection>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Action,::Detection>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Action, ::Detection>* Lights::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Action, ::Detection>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Action, ::Detection>* Lights::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Action, ::Detection>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

Lights::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lights_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Lights::Service, ::Action, ::Detection>(
          std::mem_fn(&Lights::Service::Connect), this)));
}

Lights::Service::~Service() {
}

::grpc::Status Lights::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Detection, ::Action>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


